name: "JFrog CLI"
on:
  push:
    branches:
      - main

permissions:
  # This is required for requesting the OIDC token
#  id-token: write
  # This is required for actions/checkout
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.61.0
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
      - name: Run JFrog CLI
        run: |
          jf -v
          echo artifactory url: ${{ vars.JF_URL }}
          echo "Ping the server"
          jf rt ping
          echo "jf show config"
          jf config show > f1
          cat f1

  evidence-collection:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.61.0
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
          RT_URL_L: ${{ vars.JF_URL }}
      - name: Run jq
        uses: sergeysova/jq-action@v2
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
      - name: Release Info Evidence
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
              JSON=$(jq -n \
                --arg hash "${{ github.event.commits[0].id }}" \
                --arg author "${{ github.event.commits[0].author.name }}" \
                --arg date "${{ github.event.commits[0].timestamp }}" \
                --arg message "${{ github.event.commits[0].message }}" \
                '$ARGS.named'
              )
              echo "$JSON" > output.json
          fi
          echo "pwd is $PWD"
          openssl genrsa -out private.pem 2048
          openssl rsa -in private.pem -pubout -out public.pem
          chmod +x private.pem
          echo "ls -l"
          ls -l
          jf evd create --predicate /home/runner/work/demoapp/demoapp/output.json --predicate-type https://jfrog/build/code-review --repo-path commons-dev-generic-local/commons/file.txt@69d29925ba75eca8e67e0ad99d1132b47d599c206382049bc230f2edd2d3af30 --key /keys/private.pem
                
  commit-since-last-release:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Run jq
        uses: sergeysova/jq-action@v2
      - name: 📎 Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 📋 Get Commits since last Release
        id: changes
        uses: simbo/changes-since-last-release-action@v1.0.1
      - name: 📝 Output collected Data
        run: |
          echo "Changes since ${{ steps.changes.outputs.last-tag }}:"
          echo "${{ steps.changes.outputs.log }}"
          echo "${{ steps.changes.outputs.log }}" | sed 's/%0A/\n/g' | sed 's/- \([a-f0-9]*\) \(.*\)/{ "id": "\1", "message": "\2" }/' | jq -s '{commits: .}'
          echo "____________________________"
          echo "${{ toJson(steps.changes) }}"

  sonar:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: 🚀 Run SonarQube Analysis
        run: |
          # Run SonarQube analysis here
          # Save the output to a JSON file (e.g., sonar-output.json)
      - name: 📁 Upload SonarQube Output
        uses: actions/upload-artifact@v2
        with:
          name: sonar-output
          path: sonar-output.json