name: On Release Collect Change-Logs

on:
  release

permissions:
  contents: read

jobs:
  commit-since-last-release:
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.61.0
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
      - name: Run jq
        uses: sergeysova/jq-action@v2
      - name: 📎 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 📋 Get Commits since last Release
        id: changes
        uses: simbo/changes-since-last-release-action@v1.0.1
      - name: 📝 Output collected Data
        run: |
          echo "Changes since ${{ steps.changes.outputs.last-tag }}:" 
          echo "__________________________"
          function all_commits() {
              local owner="$1"
              local repo="$2"
              local GH_TOKEN="$3"
              # Get the commit details in JSON format for all commits since the last tag
              git log --pretty=format:'{"commit":"%H","abbreviated_commit":"%h","tree":"%T","abbreviated_tree":"%t","parent":"%P","abbreviated_parent":"%p","refs":"%D","encoding":"%e","subject":"%s","sanitized_subject_line":"%f","body":"%b","commit_notes":"%N","verification_flag":"%G?","signer":"%GS","signer_key":"%GK","author":{"name":"%aN","email":"%aE","date":"%aD"},"commiter":{"name":"%cN","email":"%cE","date":"%cD"}}' ${{ steps.changes.outputs.last-tag }}..HEAD > tmp
              output_file="output.json" # The file where the output will be saved
              echo "[" > "$output_file"
              total_lines=$(cat tmp | wc -l) # Get the total number of lines
              current_line=0
              while IFS= read -r line || [ -n "$line" ]; do
                current_line=$((current_line + 1))
                if [ "$current_line" -le "$total_lines" ]; then
                  echo "  $line," >> "$output_file"
                else
                  echo "  $line" >> "$output_file"
                fi
              done < tmp
              echo "]" >> "$output_file"
              rm tmp

              > tmp_updated.json

              # Iterate over each commit in output_file
              jq -c '.[]' "$output_file" | while read -r commit_json; do
                commit_sha=$(echo "$commit_json" | jq -r '.commit')
                pull_request_numbers=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$owner/$repo/commits/$commit_sha/pulls" | jq -r '.[] | .number')

                if [[ -n "$pull_request_numbers" ]]; then
                  for pull_request_number in $pull_request_numbers; do
                    # Use the pull request number to fetch review details
                    reviewers=$(curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/$owner/$repo/pulls/$pull_request_number/reviews" | jq -r '.[] | {user: .user.login, state: .state, submitted_at: .submitted_at}')
                    if [[ -n "$reviewers" && "$reviewers" != "[]" ]]; then
                      # Update the commit_json with pull_request_details
                      commit_json=$(echo "$commit_json" | jq --argjson reviewers "$reviewers" '. + {pull_request_details: $reviewers}')
                    fi
                  done
                fi

                # Write the commit_json to tmp_updated.json regardless of having pull request details or not
                echo "$commit_json" >> tmp_updated.json
              done

              # Replace the old output file with the new updated temporary file
              # Ensure it's a valid JSON array
              jq -s '.' tmp_updated.json > "$output_file"
              rm tmp_updated.json

              cat $output_file
          }

          owner="lesnerd"
          repo="demoapp"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"

          all_commits "$owner" "$repo" "$TOKEN"
#          echo "______________CREATING EVIDENCE______________"
#          jf evd create --predicate output.json --predicate-type https://jfrog/build/code-review --repo-path commons-dev-generic-local/commons/file.txt@69d29925ba75eca8e67e0ad99d1132b47d599c206382049bc230f2edd2d3af30 --key ${{ secrets.RSA_PK }}